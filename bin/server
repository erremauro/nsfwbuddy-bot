#! /usr/bin/env node
const os = require('os');
const env = require('../config/env');
const logger = require('rear-logger')('nsfwbuddy-bot');
const pkg = require('../package.json');
const bot = require('../index');
const ifaces = os.networkInterfaces();

if (require.main === module) {
  Main();
}

function Main() {
  configurGracefulShutdown();

  bot.start()
  onListening();
}

/**
 *  Listen to SIGINT and SIGTERM events to
 *  gracefully shutdown the applcation.
 */
function configurGracefulShutdown() {
  process.on('SIGINT', () => {
    logger.clearLine();
    logger.quit('Server stopped.');
    process.exit(0)
  });

  process.on('SIGTERM', () => {
    logger.clearLine();
    logger.quit('Server stopped.');
    process.exit(0)
  });
}

/**
 * Event listener for HTTP server "listening" event.
 *
 * @param {Object} opts Script optons
 */

function onListening(opts) {
  logger.clear();
  logger.highlight(`${pkg.name}@v${pkg.version}`);
  logger.log();
  logger.success(`Bot server started. %c(${env.NODE_ENV})%c`, 'magenta', 'reset');
  logger.log();
  logger.info('Available on:');

  const hostname = env.HOST === '0.0.0.0' ? '127.0.0.1' : env.HOST;
  const protocol = env.SSL ? 'https://' : 'http://';

  printInterfaces(env.PORT, hostname, protocol);

  logger.log();
  logger.hint('Hit CTRL-C to stop the server.');
}

function printInterfaces (port, hostname, protocol) {
  if (hostname && hostname !== '127.0.0.1') {
    logger.log('        => %c' + protocol + hostname + ':' + port, 'bold_underline_white')
  } else {
    Object.keys(ifaces).forEach((dev) => {
      ifaces[dev].forEach((details) => {
        if (details.family === 'IPv4') {
          logger.log('        => %c' + protocol + details.address + ':' + port, 'bold_underline_white')
        }
      })
    })
  }
}

function getInterfaces (port, address, ssl) {
  const hostname = address === '0.0.0.0' ? '127.0.0.1' : address
  const protocol = ssl ? 'https://' : 'http://'
  const ret = []

  if (address && address !== '0.0.0.0') {
    ret.push(protocol + hostname + ':' + port)
  } else {
    Object.keys(ifaces).forEach((dev) => {
      ifaces[dev].forEach((details) => {
        if (details.family === 'IPv4') {
          ret.push(protocol + details.address + ':' + port)
        }
      })
    })
  }

  return ret
}

/**
 * Normalize a port into a number, string, or false.
 *
 * @param {Number|string} value Port value
 */

function normalizePort(value) {
  const port = parseInt(value, 10);

  if (isNaN(port)) {
    // named pipe
    return value;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


